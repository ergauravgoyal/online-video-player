{"version":3,"sources":["components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchText","onInputChange","e","_this","setState","target","value","onFormSubmit","preventDefault","props","react_default","a","createElement","className","onSubmit","this","type","onChange","React","Component","VideoItem","_ref","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedVideoList","map","src_components_VideoItem","key","etag","VideoDetail","videoSrc","concat","id","videoId","description","App","selectedVideo","onVideoSearch","_callee","response","regenerator_default","wrap","_context","prev","next","axios","get","sent","data","items","stop","components_SearchBar","components_VideoDetail","components_VideoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRA+BeA,6MA5BXC,MAAQ,CACJC,WAAW,MAGfC,cAAgB,SAACC,GACbC,EAAKC,SAAS,CACVJ,WAAWE,EAAEG,OAAOC,WAI5BC,aAAe,SAACL,GACZA,EAAEM,iBACFL,EAAKM,MAAMF,aAAaJ,EAAKJ,MAAMC,qFAGnC,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKR,aAAcM,UAAU,WACzCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOV,MAAOS,KAAKhB,MAAMC,WAAYiB,SAAUF,KAAKd,0BArBhEiB,IAAMC,4BCcfC,SAbG,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,MAAMC,EAAoBF,EAApBE,cACvB,OACIb,EAAAC,EAAAC,cAAA,OAAKY,QAAS,kBAAMD,EAAcD,IAAQT,UAAU,mBAChDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWY,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IAAKC,IAAKR,EAAMI,QAAQK,QACvFrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACVS,EAAMI,QAAQK,WCQpBC,EAdG,SAAAX,GAA+B,IAA5BY,EAA4BZ,EAA5BY,OAAQV,EAAoBF,EAApBE,cACnBW,EAAoBD,EAAOE,IAAI,SAACb,GAClC,OACIZ,EAAAC,EAAAC,cAACwB,EAAD,CAAWb,cAAeA,EAAeD,MAAOA,EAAOe,IAAKf,EAAMgB,SAG1E,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACVqB,ICUEK,EAnBK,SAAAlB,GAAa,IAAXC,EAAWD,EAAXC,MAClB,IAAKA,EACD,OAAOZ,EAAAC,EAAAC,cAAA,yBAGX,IAAM4B,EAAQ,iCAAAC,OAAoCnB,EAAMoB,GAAGC,SAC3D,OACIjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQa,IAAKe,EAAUT,MAAOT,EAAMI,QAAQK,SAEhDrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaS,EAAMI,QAAQK,OACzCrB,EAAAC,EAAAC,cAAA,SAAIU,EAAMI,QAAQkB,gBC+BnBC,6MAvCb9C,MAAQ,CACNkC,OAAQ,GACRa,cAAe,QAKjBC,oDAAgB,SAAAC,EAAMhD,GAAN,IAAAiD,EAAA,OAAAC,EAAAvC,EAAAwC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,IAAMC,IAAN,wHAAAf,OAAkIzC,IAD3I,OACRiD,EADQG,EAAAK,KAEdtD,EAAKC,SAAS,CACZ6B,OAAQgB,EAASS,KAAKC,MACtBb,cAAcG,EAASS,KAAKC,MAAM,KAJtB,wBAAAP,EAAAQ,SAAAZ,8DAQhBzB,cAAgB,SAACD,GACfnB,EAAKC,SAAS,CACZ0C,cAAexB,wFAZjBP,KAAKgC,cAAc,0DAgBnB,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACiD,EAAD,CAAWtD,aAAcQ,KAAKgC,gBAC9BrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACkD,EAAD,CAAaxC,MAAOP,KAAKhB,MAAM+C,iBAEjCpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACmD,EAAD,CAAWxC,cAAeR,KAAKQ,cAAeU,OAAQlB,KAAKhB,MAAMkC,oBA/B7Dd,aCME6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9842f2b.chunk.js","sourcesContent":["import React from 'react';\n\nclass SearchBar extends React.Component{\n    state = {\n        searchText:''\n    };\n\n    onInputChange = (e) =>{\n        this.setState({\n            searchText:e.target.value\n        });\n    };\n\n    onFormSubmit = (e) =>{\n        e.preventDefault();\n        this.props.onFormSubmit(this.state.searchText);\n    }\n    render(){\n        return(\n            <div className=\"search-bar ui segment\">\n                <form onSubmit={this.onFormSubmit} className=\"ui form\">\n                    <div className=\"field\">\n                        <label>Video Search</label>\n                        <input type=\"text\" value={this.state.searchText} onChange={this.onInputChange}/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import './VideoItem.css'\nimport React from 'react'\n\nconst VideoItem = ({ video,onVideoSelect }) => {\n    return (\n        <div onClick={() => onVideoSelect(video)} className=\"video-item item\">\n            <img className=\"ui image\" src={video.snippet.thumbnails.medium.url} alt={video.snippet.title} />\n            <div className=\"content\">\n                <div className=\"header\">\n                    {video.snippet.title}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default VideoItem\n","import React from 'react'\nimport VideoItem from './VideoItem';\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n    const renderedVideoList = videos.map((video) => {\n        return (\n            <VideoItem onVideoSelect={onVideoSelect} video={video} key={video.etag} />\n        )\n    })\n    return (\n        <div className=\"ui relaxed divided list\">\n            {renderedVideoList}\n        </div>\n    )\n}\n\n\nexport default VideoList\n","import React from 'react'\n\nconst VideoDetail = ({video}) => {\n    if( !video){\n        return <div>Loading...</div>\n    }\n\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\n    return (\n        <div>\n            <div className=\"ui embed\">\n                <iframe src={videoSrc} title={video.snippet.title   } />\n            </div>\n            <div className=\"ui segment\">\n                <h4 className=\"ui header\">{video.snippet.title}</h4>\n                <p>{video.snippet.description}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default VideoDetail\n","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport axios from 'axios';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\nclass App extends Component {\n  state = {\n    videos: [],\n    selectedVideo: null\n  }\n  componentDidMount(){\n    this.onVideoSearch('React.js Crash Course')\n  }\n  onVideoSearch = async searchText => {\n    const response = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=5&key=AIzaSyB-Y0np6umKZ2lH8DXaA-N1j-tLBZCxVfM&q=${searchText}`)\n    this.setState({\n      videos: response.data.items,\n      selectedVideo:response.data.items[0]\n    })\n  };\n\n  onVideoSelect = (video) => {\n    this.setState({\n      selectedVideo: video\n    })\n  };\n  render() {\n    return (\n      <div className=\"ui container\">\n        <SearchBar onFormSubmit={this.onVideoSearch} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"ten wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"six wide column\">\n              <VideoList onVideoSelect={this.onVideoSelect} videos={this.state.videos} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}